# run test with python3 -m doctest -v ./tests/1-my_list.txt

>>> MyList = __import__('1-my_list').MyList

Test type:
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

Test inherited methods:
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> print(my_list)
    [1, 2, 3]

    >>> my_list[0] = 4
    >>> print(my_list)
    [4, 2, 3]

    >>> my_list.remove(4)
    >>> print(my_list)
    [2, 3]

Test empty list:
    >>> my_empty_list = MyList()
    >>> type(my_empty_list)
    <class '1-my_list.MyList'>
    >>> print(my_empty_list)
    []

Test wrong arguments:
    >>> my_none_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable

    >>> my_double_list = MyList([1, 2], [3, 4])
    Traceback (most recent call last):
    TypeError: list expected at most 1 argument, got 2

Test print_sorted method:
    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of [2, 3]>

    >>> my_new_list = MyList()
    >>> my_new_list.append(1)
    >>> my_new_list.append(4)
    >>> my_new_list.append(2)
    >>> my_new_list.append(3)
    >>> my_new_list.append(5)
    >>> print(my_new_list)
    [1, 4, 2, 3, 5]
    >>> my_new_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> print(my_new_list)
    [1, 4, 2, 3, 5]

    >>> my_string_list = MyList()
    >>> my_string_list.append("d")
    >>> my_string_list.append("c")
    >>> my_string_list.append("b")
    >>> my_string_list.append("a")
    >>> print(my_string_list)
    ['d', 'c', 'b', 'a']
    >>> my_string_list.print_sorted()
    ['a', 'b', 'c', 'd']
    >>> print(my_string_list)
    ['d', 'c', 'b', 'a']

    >>> my_w_list = MyList([1, "a", "b", 2])
    >>> my_w_list.print_sorted()
    Traceback (most recent call last):
    TypeError: '<' not supported between instances of 'str' and 'int'
